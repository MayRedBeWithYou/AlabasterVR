// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel AddMaterial
#pragma kernel RemoveMaterial

RWStructuredBuffer<float> sdf;
RWStructuredBuffer<float3> colors;
float3 color;

float4x4 voxelToCursorCoords;

float edge;
float chunkSize;
uint resolution;
float voxelSpacing;

uint coords(uint3 id)
{
    return id.z * resolution * resolution + id.y * resolution + id.x;
}

float3 realPos(uint3 id)
{
    return id * voxelSpacing;
}

float sdBox(float3 p, float3 b)
{
    float3 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

[numthreads(8, 8, 8)]
void AddMaterial(uint3 id : SV_DispatchThreadID)
{
    uint arrCoords = coords(id);
    float sdfVal = sdf[arrCoords];
    float3 transformedPoint = mul(voxelToCursorCoords, float4(realPos(id), 1)).xyz;
    float val = sdBox(transformedPoint, float3(edge, edge, edge));
    val = clamp(val, -voxelSpacing, voxelSpacing);
    sdf[arrCoords] = min(val, sdfVal);
    if (val < voxelSpacing)
    {
        colors[arrCoords] = color;
    }
}

[numthreads(8, 8, 8)]
void RemoveMaterial(uint3 id : SV_DispatchThreadID)
{
    uint arrCoords = coords(id);
    float sdfVal = sdf[arrCoords];
    float3 transformedPoint = mul(voxelToCursorCoords, float4(realPos(id), 1)).xyz;
    float val = sdBox(transformedPoint, float3(edge, edge, edge));
    val = clamp(val, -voxelSpacing, voxelSpacing);
    sdf[arrCoords] = max(-val, sdfVal);
}


