// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct MoveData
{
    uint3 from;
    float3 gradient;
    float3 rGradient;
    float3 gGradient;
    float3 bGradient;
};

RWStructuredBuffer<float> sdf;
RWStructuredBuffer<float3> colors;
StructuredBuffer<MoveData> workBuffer;

float spacing;
float3 offset;
uint resolution;
StructuredBuffer<uint> entries;

uint coords(uint3 id)
{
    return id.z * resolution * resolution + id.y * resolution + id.x;
}

[numthreads(512, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if (id.x < entries[0])
    {
        MoveData data;
        data = workBuffer[id.x];
        float value = sdf[coords(data.from)] - dot(offset, data.gradient);
        value = clamp(-0.01209677f, 0.01209677f, value);
        sdf[coords(data.from)] = value;
        
        float3 outColor;

        value = colors[coords(data.from)].r - dot(offset, data.rGradient);
        value = clamp(0, 1, value);
        outColor.r = value;
        value = colors[coords(data.from)].g - dot(offset, data.gGradient);
        value = clamp(0, 1, value);
        outColor.g = value;
        value = colors[coords(data.from)].b - dot(offset, data.bGradient);
        value = clamp(0, 1, value);
        outColor.b = value;

        colors[coords(data.from)] = outColor;
    }
}
