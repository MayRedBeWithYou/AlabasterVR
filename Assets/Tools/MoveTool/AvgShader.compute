// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float> sdf;
RWStructuredBuffer<float> workBuffer;
float toolRadius;
float3 toolCenter;
float chunkSize;
uint resolution;

uint coords(uint3 id)
{
    return id.z * resolution * resolution + id.y * resolution + id.x;
}

float3 realPos(uint3 id)
{
    float3 ids = id;
    float res = resolution - 1;
    ids = id / res;
    return ids * chunkSize;
}

[numthreads(8, 8, 8)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    if(id.x > 0 || id.x < 7 || id.y > 0 || id.y < 7 || id.z > 0 ||)
    uint arrCoords = coords(id);
    workBuffer = sdf[arrCoords];
    float currentValue = sdf[arrCoords];
    float3 displacement = realPos(id) - toolCenter;
    float val = dot(displacement, displacement) - (toolRadius * toolRadius);
    if (val < 0) //target voxel is inside tool's radius
    {
        uint3 a = id;
        left.x 
        sdf[arrCoords] = min(currentValue, rounding(currentValue, 0.001f));
    }
}
