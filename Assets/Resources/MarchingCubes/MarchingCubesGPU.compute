#pragma kernel March
#include "Tables.compute"

static const int numThreads = 8;

struct Triangle {
    float3 vertexC;
    float3 vertexA;
    float3 vertexB;
    float3 normC;
    float3 normB;
    float3 normA;
};

AppendStructuredBuffer<Triangle> triangles;
StructuredBuffer<float> points;
int numPointsPerAxis;
float isoLevel;
float chunkSize;

float3 realPos(uint3 id)
{
    float3 ids = id;
    float res = numPointsPerAxis - 1;
    ids = ids / res;
    return ids * chunkSize;
}

float3 interpolateVerts(float4 v1, float4 v2) {
    float t = (isoLevel - v1.w) / (v2.w - v1.w);
    return v1.xyz + t * (v2.xyz - v1.xyz);
}

int indexFromCoord(int x, int y, int z) {
    return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

float3 getNormal(float3 p1, float3 p2, float3 p3)
{
    float3 U = p2 - p1;
    float3 V = p3 - p1;
    return cross(U, V);
}

float4 sdfValAndPos(int x, int y, int z, uint3 id)
{
    float4 retVal;
    retVal.xyz = realPos(id);
    retVal.w = points[indexFromCoord(x, y, z)];
    return retVal;
}

[numthreads(numThreads, numThreads, numThreads)]
void March(int3 id : SV_DispatchThreadID)
{
    // Stop one point before the end because voxel includes neighbouring points
    if (id.x >= numPointsPerAxis - 1 || id.y >= numPointsPerAxis - 1 || id.z >= numPointsPerAxis - 1) {
        return;
    }

    // 8 corners of the current cube
    float4 cubeCorners[8] = {
        sdfValAndPos(id.x, id.y, id.z,id + uint3(0,0,0)),
        sdfValAndPos(id.x + 1, id.y, id.z,id + uint3(1,0,0)),
        sdfValAndPos(id.x + 1, id.y, id.z + 1,id + uint3(1,0,1)),
        sdfValAndPos(id.x, id.y, id.z + 1,id + uint3(0,0,1)),
        sdfValAndPos(id.x, id.y + 1, id.z,id + uint3(0,1,0)),
        sdfValAndPos(id.x + 1, id.y + 1, id.z,id + uint3(1,1,0)),
        sdfValAndPos(id.x + 1, id.y + 1, id.z + 1,id + uint3(1,1,1)),
        sdfValAndPos(id.x, id.y + 1, id.z + 1,id + uint3(0,1,1))
    };

    // Calculate unique index for each cube configuration.
    // There are 256 possible values
    // A value of 0 means cube is entirely inside surface; 255 entirely outside.
    // The value is used to look up the edge table, which indicates which edges of the cube are cut by the isosurface.
    int cubeIndex = 0;
    if (cubeCorners[0].w < isoLevel) cubeIndex |= 1;
    if (cubeCorners[1].w < isoLevel) cubeIndex |= 2;
    if (cubeCorners[2].w < isoLevel) cubeIndex |= 4;
    if (cubeCorners[3].w < isoLevel) cubeIndex |= 8;
    if (cubeCorners[4].w < isoLevel) cubeIndex |= 16;
    if (cubeCorners[5].w < isoLevel) cubeIndex |= 32;
    if (cubeCorners[6].w < isoLevel) cubeIndex |= 64;
    if (cubeCorners[7].w < isoLevel) cubeIndex |= 128;

    // Create triangles for current cube configuration
    for (int i = 0; triangulation[cubeIndex][i] != -1; i += 3) {
        // Get indices of corner points A and B for each of the three edges
        // of the cube that need to be joined to form the triangle.
        int a0 = cornerIndexAFromEdge[triangulation[cubeIndex][i]];
        int b0 = cornerIndexBFromEdge[triangulation[cubeIndex][i]];

        int a1 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 1]];
        int b1 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 1]];

        int a2 = cornerIndexAFromEdge[triangulation[cubeIndex][i + 2]];
        int b2 = cornerIndexBFromEdge[triangulation[cubeIndex][i + 2]];

        Triangle tri;
        tri.vertexA = interpolateVerts(cubeCorners[a0], cubeCorners[b0]);
        tri.vertexB = interpolateVerts(cubeCorners[a1], cubeCorners[b1]);
        tri.vertexC = interpolateVerts(cubeCorners[a2], cubeCorners[b2]);
        float3 normal = getNormal(tri.vertexA, tri.vertexB, tri.vertexC);
        tri.normA = normal;
        tri.normB = normal;
        tri.normC = normal;

        //tri.vertexA = cubeCorners[a0];
        //tri.vertexB = cubeCorners[a1];
        //tri.vertexC = cubeCorners[a2];
        //tri.vertexA.xyz = 0; 
        //tri.vertexB.x = 1;
        //tri.vertexB.yz = 0;
        //tri.vertexC.y = 1;
        //tri.vertexC.xz = 0;
        triangles.Append(tri);

    }


}
